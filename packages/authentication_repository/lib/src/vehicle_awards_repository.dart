// ignore_for_file: public_member_api_docs

import 'package:authentication_repository/authentication_repository.dart';
import 'package:authentication_repository/src/models/vehicle_award.dart';
import 'package:authentication_repository/src/pocketbase_service.dart';

/// Repository for managing vehicle awards
class VehicleAwardsRepository {
  const VehicleAwardsRepository({
    required PocketBaseService pocketBaseService,
  }) : _pocketBaseService = pocketBaseService;

  final PocketBaseService _pocketBaseService;

  /// Get all awards for a specific vehicle
  Future<List<VehicleAward>> getAwardsByVehicleId(String vehicleId) async {
    try {
      final response = await _pocketBaseService.client.collection('vehicle_awards').getList(
            page: 1,
            perPage: 100, // Get up to 100 awards per vehicle
            filter: 'vehicle_id = "$vehicleId"',
            sort: '-event_date', // Sort by event date, newest first
          );

      return response.items.map((item) => VehicleAward.fromJson(item.data as Map<String, Object?>)).toList();
    } catch (e) {
      throw VehicleAwardsException('Failed to fetch awards for vehicle: $e');
    }
  }

  /// Create a new award for a vehicle
  Future<VehicleAward> createAward(VehicleAward award) async {
    try {
      final data = award.toJson();
      // Remove id and timestamps as they'll be generated by PocketBase
      data.remove('id');
      data.remove('created_at');
      data.remove('updated_at');

      final response = await _pocketBaseService.client.collection('vehicle_awards').create(body: data);

      return VehicleAward.fromJson(response.data as Map<String, Object?>);
    } catch (e) {
      throw VehicleAwardsException('Failed to create award: $e');
    }
  }

  /// Update an existing award
  Future<VehicleAward> updateAward(String id, Map<String, dynamic> data) async {
    try {
      // Add updated timestamp
      data['updated_at'] = DateTime.now().toIso8601String();

      final response = await _pocketBaseService.client.collection('vehicle_awards').update(id, body: data);

      return VehicleAward.fromJson(response.data as Map<String, Object?>);
    } catch (e) {
      throw VehicleAwardsException('Failed to update award: $e');
    }
  }

  /// Delete an award
  Future<void> deleteAward(String id) async {
    try {
      await _pocketBaseService.client.collection('vehicle_awards').delete(id);
    } catch (e) {
      throw VehicleAwardsException('Failed to delete award: $e');
    }
  }

  /// Get a specific award by ID
  Future<VehicleAward> getAwardById(String id) async {
    try {
      final response = await _pocketBaseService.client.collection('vehicle_awards').getOne(id);

      return VehicleAward.fromJson(response.data as Map<String, Object?>);
    } catch (e) {
      throw VehicleAwardsException('Failed to fetch award: $e');
    }
  }

  /// Get awards by category
  Future<List<VehicleAward>> getAwardsByCategory(String category) async {
    try {
      final response = await _pocketBaseService.client.collection('vehicle_awards').getList(
            page: 1,
            perPage: 100,
            filter: 'category = "$category"',
            sort: '-event_date',
          );

      return response.items.map((item) => VehicleAward.fromJson(item.data as Map<String, Object?>)).toList();
    } catch (e) {
      throw VehicleAwardsException('Failed to fetch awards by category: $e');
    }
  }

  /// Get awards by year
  Future<List<VehicleAward>> getAwardsByYear(int year) async {
    try {
      final startOfYear = DateTime(year).toIso8601String();
      final endOfYear = DateTime(year, 12, 31, 23, 59, 59).toIso8601String();

      final response = await _pocketBaseService.client.collection('vehicle_awards').getList(
            page: 1,
            perPage: 100,
            filter: 'event_date >= "$startOfYear" && event_date <= "$endOfYear"',
            sort: '-event_date',
          );

      return response.items.map((item) => VehicleAward.fromJson(item.data as Map<String, Object?>)).toList();
    } catch (e) {
      throw VehicleAwardsException('Failed to fetch awards by year: $e');
    }
  }
}

/// Exception thrown when vehicle awards operations fail
class VehicleAwardsException implements Exception {
  const VehicleAwardsException(this.message);
  final String message;

  @override
  String toString() => 'VehicleAwardsException: $message';
}
